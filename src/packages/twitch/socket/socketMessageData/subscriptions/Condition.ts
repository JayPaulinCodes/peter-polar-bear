import { PickOptional, PickRequired } from "../../../UtilityTypes";

interface Condition {
    broadcaster_user_id: string;
    moderator_user_id: string;
    user_id: string;
    from_broadcaster_user_id: string;
    to_broadcaster_user_id: string;
    reward_id: string;
    client_id: string;
    conduit_id: string;
    organization_id: string;
    category_id: string;
    campaign_id: string;
    extension_client_id: string;
}

export type AutomodMessageHoldCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type AutomodMessageUpdateCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type AutomodSettingsUpdateCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type AutomodTermsUpdateCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelAdBreakBeginCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelBanCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelChatClearCondition = PickRequired<Condition, "broadcaster_user_id" | "user_id">;
export type ChannelChatClearUserMessagesCondition = PickRequired<Condition, "broadcaster_user_id" | "user_id">;
export type ChannelChatMessageCondition = PickRequired<Condition, "broadcaster_user_id" | "user_id">;
export type ChannelChatMessageDeleteCondition = PickRequired<Condition, "broadcaster_user_id" | "user_id">;
export type ChannelChatNotificationCondition = PickRequired<Condition, "broadcaster_user_id" | "user_id">;
export type ChannelChatSettingsUpdateCondition = PickRequired<Condition, "broadcaster_user_id" | "user_id">;
export type ChannelChatUserMessageHoldCondition = PickRequired<Condition, "broadcaster_user_id" | "user_id">;
export type ChannelChatUserMessageUpdateCondition = PickRequired<Condition, "broadcaster_user_id" | "user_id">;
export type ChannelSubscribeCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelSubscriptionEndCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelSubscriptionGiftCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelSubscriptionMessageCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelCheerCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelUpdateCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelFollowCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelUnbanCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelUnbanRequestCreateCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelUnbanRequestResolveCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelRaidCondition = PickOptional<Condition, "from_broadcaster_user_id" | "to_broadcaster_user_id">;
export type ChannelModerateCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelModeratorAddCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelModeratorRemoveCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelGuestStarSessionBeginCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelGuestStarSessionEndCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelGuestStarSessionUpdateCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelGuestStarSessionSettingUpdateCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelPointsAutomaticRewardRedemptionAddCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelPointsCustomRewardAddCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelPointsCustomRewardUpdateCondition = PickRequired<Condition, "broadcaster_user_id"> & PickOptional<Condition, "reward_id">;
export type ChannelPointsCustomRewardRemoveCondition = PickRequired<Condition, "broadcaster_user_id"> & PickOptional<Condition, "reward_id">;
export type ChannelPointsCustomRewardRedemptionAddCondition = PickRequired<Condition, "broadcaster_user_id"> & PickOptional<Condition, "reward_id">;
export type ChannelPointsCustomRewardRedemptionUpdateCondition = PickRequired<Condition, "broadcaster_user_id"> & PickOptional<Condition, "reward_id">;
export type ChannelPollBeginCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelPollProgressCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelPollEndCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelPredictionBeginCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelPredictionProgressCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelPredictionLockCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelPredictionEndCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelSuspiciousUserMessageCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelSuspiciousUserUpdateCondition = PickRequired<Condition, "broadcaster_user_id" | "moderator_user_id">;
export type ChannelVipAddCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ChannelVipRemoveCondition = PickRequired<Condition, "broadcaster_user_id">;
export type ConduitShardDisabledCondition = PickRequired<Condition, "client_id"> & PickOptional<Condition, "conduit_id">;
export type DropEntitlementGrantCondition = PickRequired<Condition, "organization_id"> & PickOptional<Condition, "category_id" | "campaign_id">;
export type ExtensionBitsTransactionCreateCondition = PickRequired<Condition, "extension_client_id">;
export type GoalsCondition = PickRequired<Condition, "broadcaster_user_id">;
export type HypeTrainBeginCondition = PickRequired<Condition, "broadcaster_user_id">;
export type HypeTrainProgressCondition = PickRequired<Condition, "broadcaster_user_id">;
export type HypeTrainEndCondition = PickRequired<Condition, "broadcaster_user_id">;
export type StreamOnlineCondition = PickRequired<Condition, "broadcaster_user_id">;
export type StreamOfflineCondition = PickRequired<Condition, "broadcaster_user_id">;
export type UserAuthorizationGrantCondition = PickRequired<Condition, "client_id">;
export type UserAuthorizationRevokeCondition = PickRequired<Condition, "client_id">;
export type UserAuthorizationUpdateCondition = PickRequired<Condition, "client_id">;
export type WhisperReceivedCondition = PickRequired<Condition, "client_id">;

export interface SubscriptionConditionMap {
    "AutomodMessageHold": AutomodMessageHoldCondition;
    "AutomodMessageUpdate": AutomodMessageUpdateCondition;
    "AutomodSettingsUpdate": AutomodSettingsUpdateCondition;
    "AutomodTermsUpdate": AutomodTermsUpdateCondition;
    "ChannelAdBreakBegin": ChannelAdBreakBeginCondition;
    "ChannelBan": ChannelBanCondition;
    "ChannelChatClear": ChannelChatClearCondition;
    "ChannelChatClearUserMessages": ChannelChatClearUserMessagesCondition;
    "ChannelChatMessage": ChannelChatMessageCondition;
    "ChannelChatMessageDelete": ChannelChatMessageDeleteCondition;
    "ChannelChatNotification": ChannelChatNotificationCondition;
    "ChannelChatSettingsUpdate": ChannelChatSettingsUpdateCondition;
    "ChannelChatUserMessageHold": ChannelChatUserMessageHoldCondition;
    "ChannelChatUserMessageUpdate": ChannelChatUserMessageUpdateCondition;
    "ChannelSubscribe": ChannelSubscribeCondition;
    "ChannelSubscriptionEnd": ChannelSubscriptionEndCondition;
    "ChannelSubscriptionGift": ChannelSubscriptionGiftCondition;
    "ChannelSubscriptionMessage": ChannelSubscriptionMessageCondition;
    "ChannelCheer": ChannelCheerCondition;
    "ChannelUpdate": ChannelUpdateCondition;
    "ChannelFollow": ChannelFollowCondition;
    "ChannelUnban": ChannelUnbanCondition;
    "ChannelUnbanRequestCreate": ChannelUnbanRequestCreateCondition;
    "ChannelUnbanRequestResolve": ChannelUnbanRequestResolveCondition;
    "ChannelRaid": ChannelRaidCondition;
    "ChannelModerate": ChannelModerateCondition;
    "ChannelModeratorAdd": ChannelModeratorAddCondition;
    "ChannelModeratorRemove": ChannelModeratorRemoveCondition;
    "ChannelGuestStarSessionBegin": ChannelGuestStarSessionBeginCondition;
    "ChannelGuestStarSessionEnd": ChannelGuestStarSessionEndCondition;
    "ChannelGuestStarSessionUpdate": ChannelGuestStarSessionUpdateCondition;
    "ChannelGuestStarSessionSettingUpdate": ChannelGuestStarSessionSettingUpdateCondition;
    "ChannelPointsAutomaticRewardRedemptionAdd": ChannelPointsAutomaticRewardRedemptionAddCondition;
    "ChannelPointsCustomRewardAdd": ChannelPointsCustomRewardAddCondition;
    "ChannelPointsCustomRewardUpdate": ChannelPointsCustomRewardUpdateCondition;
    "ChannelPointsCustomRewardRemove": ChannelPointsCustomRewardRemoveCondition;
    "ChannelPointsCustomRewardRedemptionAdd": ChannelPointsCustomRewardRedemptionAddCondition;
    "ChannelPointsCustomRewardRedemptionUpdate": ChannelPointsCustomRewardRedemptionUpdateCondition;
    "ChannelPollBegin": ChannelPollBeginCondition;
    "ChannelPollProgress": ChannelPollProgressCondition;
    "ChannelPollEnd": ChannelPollEndCondition;
    "ChannelPredictionBegin": ChannelPredictionBeginCondition;
    "ChannelPredictionProgress": ChannelPredictionProgressCondition;
    "ChannelPredictionLock": ChannelPredictionLockCondition;
    "ChannelPredictionEnd": ChannelPredictionEndCondition;
    "ChannelSuspiciousUserMessage": ChannelSuspiciousUserMessageCondition;
    "ChannelSuspiciousUserUpdate": ChannelSuspiciousUserUpdateCondition;
    "ChannelVipAdd": ChannelVipAddCondition;
    "ChannelVipRemove": ChannelVipRemoveCondition;
    "ConduitShardDisabled": ConduitShardDisabledCondition;
    "DropEntitlementGrant": DropEntitlementGrantCondition;
    "ExtensionBitsTransactionCreate": ExtensionBitsTransactionCreateCondition;
    "Goals": GoalsCondition;
    "HypeTrainBegin": HypeTrainBeginCondition;
    "HypeTrainProgress": HypeTrainProgressCondition;
    "HypeTrainEnd": HypeTrainEndCondition;
    "StreamOnline": StreamOnlineCondition;
    "StreamOffline": StreamOfflineCondition;
    "UserAuthorizationGrant": UserAuthorizationGrantCondition;
    "UserAuthorizationRevoke": UserAuthorizationRevokeCondition;
    "UserAuthorizationUpdate": UserAuthorizationUpdateCondition;
    "WhisperReceived": WhisperReceivedCondition;
}

export type SubscriptionCondition = SubscriptionConditionMap[keyof SubscriptionConditionMap];