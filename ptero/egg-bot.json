{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-04-10T10:23:59-04:00",
    "name": "Peter Polar Bear Bot",
    "author": "jacobwpaulin@gmail.com",
    "description": "An egg used for running Peter Polar Bear bot",
    "features": null,
    "docker_images": {
        "Nodejs 21": "ghcr.io\/parkervcp\/yolks:nodejs_21"
    },
    "file_denylist": [],
    "startup": "source /home/container/ptero/start-script.sh",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": [\r\n        \"Client startup completed in\",\r\n        \"Logged in as\",\r\n        \"Client ready\",\r\n        \"Ready\",\r\n        \"Bot ready!\",\r\n        \"The bot is ready!\",\r\n        \"Server running on port\",\r\n        \"Bot is ready\"\r\n    ]\r\n}",
        "logs": "{}",
        "stop": "^^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Peter Polar Bear Bots Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\n# Script Container: node:21-bullseye-slim\r\nreadonly ROOT_DIR=\/mnt\/server\r\n\r\necho -e \"----------------------------------------------------------------------\"\r\necho -e \"Running apt update\"\r\napt update\r\necho -e \"Installing other packages (dos2unix, curl, jq, file, unzip, rsync)\"\r\napt install -y dos2unix curl jq file unzip rsync\r\n\r\necho -e \"----------------------------------------------------------------------\"\r\necho -e \"Updating npm (this may take some time)\"\r\nnpm install npm@latest -g\r\n\r\nif [ \"$(ls -A $ROOT_DIR)\" ]; then\r\n    echo -e \"----------------------------------------------------------------------\"\r\n    echo -e \"\\\"$ROOT_DIR\\\" directory is not empty, clearing it\"\r\n    rm -rfv $ROOT_DIR\r\nfi\r\n\r\necho -e \"----------------------------------------------------------------------\"\r\necho -e \"Creating \\\"$ROOT_DIR\\\" directory\"\r\nmkdir -p $ROOT_DIR\r\ncd $ROOT_DIR\r\n\r\necho -e \"----------------------------------------------------------------------\"\r\necho -e \"Expected to pull artifact from git, trying to do so\"\r\n\r\nreadonly GIT_ADDRESS=\"https:\/\/gitlab.dojrp.online\/api\/v4\/projects\/${GIT_PROJECT_ID}\/jobs\/artifacts\/${GIT_BRANCH}\/download?job=npm_build_final\"\r\ncurl --location \"${GIT_ADDRESS}\" \\\r\n    --header \"PRIVATE-TOKEN: ${GIT_ACCESS_TOKEN}\" \\\r\n    --output \"actifact.zip\"\r\n\r\nunzip actifact.zip -d $ROOT_DIR\r\nrsync -vr $ROOT_DIR\/artifact-output\/ .\r\nrm $ROOT_DIR\/actifact.zip\r\nrm -rfv $ROOT_DIR\/artifact-output\/\r\nfind $ROOT_DIR -type f -name \"*.sh\" -exec dos2unix {} \\;\r\n\r\nif [ -f $ROOT_DIR\/package-lock.json ]; then\r\n    echo -e \"----------------------------------------------------------------------\"\r\n    echo -e \"Found package-lock.json, trying to clean install packages\"\r\n    \/usr\/local\/bin\/npm ci\r\nelif [ -f $ROOT_DIR\/package.json ]; then\r\n    echo -e \"----------------------------------------------------------------------\"\r\n    echo -e \"Found package.json, trying to install packages\"\r\n    \/usr\/local\/bin\/npm install\r\nelse\r\n    echo -e \"----------------------------------------------------------------------\"\r\n    echo -e \"Didn't find package-lock.json or package.json, not installing any packages\"\r\nfi\r\n\r\nif [ ! -z \"${ENV_CONTENT}\" ]; then\r\n    echo -e \"----------------------------------------------------------------------\"\r\n    echo -e \"Trying to build .env file\"\r\n\r\n    echo \"\" > \".env\"\r\n    IFS=$'\\n'; ADDR=($ENV_CONTENT); unset IFS;\r\n    for i in \"${ADDR[@]}\"; do\r\n        echo -e \"$i\" >> \".env\"\r\n    done\r\nfi\r\n\r\necho -e \"----------------------------------------------------------------------\"\r\necho -e \"Setting file permissions\"\r\nfind . -type f -name \"*.sh\" -exec chmod 755 {} \\;\r\n\r\necho -e \"----------------------------------------------------------------------\"\r\necho -e \"Install complete\"\r\nexit 0",
            "container": "node:21-bullseye-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Run Environment",
            "description": "The run environment to start the bot in",
            "env_variable": "RUN_ENV",
            "default_value": "development",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|in:production,development",
            "field_type": "text"
        },
        {
            "name": "Environment File",
            "description": "The contents of the .env file.\nEach line should be separated by a \"\\n\"",
            "env_variable": "ENV_CONTENT",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Auto Update",
            "description": "Pull the latest files on startup when using a Git repo.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Git Project Id",
            "description": "Project ID for the GitLab repo",
            "env_variable": "GIT_PROJECT_ID",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "string",
            "field_type": "text"
        },
        {
            "name": "Install Branch",
            "description": "The branch to install.",
            "env_variable": "GIT_BRANCH",
            "default_value": "master",
            "user_viewable": true,
            "user_editable": true,
            "rules": "string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "GIT_ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "string",
            "field_type": "text"
        }
    ]
}